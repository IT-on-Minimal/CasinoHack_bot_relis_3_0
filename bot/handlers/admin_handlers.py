from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from keyboards.admin_kb import admin_menu
from states.admin_states import AdminStates
from utils.id_utils import add_id, remove_id, load_ids

router = Router()
ADMIN_IDS = [123456789]

@router.message(F.command("admin"))
async def admin_entry(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞:", reply_markup=admin_menu)

@router.message(F.text.in_(["üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ID", "‚ûï –î–æ–±–∞–≤–∏—Ç—å ID", "‚ûñ –£–¥–∞–ª–∏—Ç—å ID"]))
async def admin_actions(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    text = message.text
    if text == "üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ID":
        ids = load_ids()
        await message.answer("\n".join(ids) if ids else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å ID":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        await state.set_state(AdminStates.awaiting_add_id)
    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å ID":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(AdminStates.awaiting_remove_id)

@router.message(AdminStates.awaiting_add_id)
async def process_add(message: types.Message, state: FSMContext):
    add_id(message.text.strip())
    await message.answer("‚úÖ ID –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()

@router.message(AdminStates.awaiting_remove_id)
async def process_remove(message: types.Message, state: FSMContext):
    remove_id(message.text.strip())
    await message.answer("‚ùå ID —É–¥–∞–ª—ë–Ω.")
    await state.clear()
