from aiogram import F, Bot, Router
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from bot.database.dp import SessionLocal
from bot.database.models import User

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è ID
awaiting_ids = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
lang_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="English", callback_data="lang_en")],
        [InlineKeyboardButton(text="Checker ID –ø–æ –±–∞–∑–µ", callback_data="lang_check")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
reg_inline_keyboard_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîó –°–°–´–õ–ö–ê –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò", callback_data="reg_link_ru")],
        [InlineKeyboardButton(text="‚úÖ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–õ–°–Ø", callback_data="registered_ru")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_lang")]
    ]
)

reg_inline_keyboard_en = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîó REGISTER LINK", callback_data="reg_link_en")],
        [InlineKeyboardButton(text="‚úÖ I HAVE REGISTERED", callback_data="registered_en")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_to_lang")]
    ]
)

# –¢–µ—Å—Ç–æ–≤–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
test_reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1")],
        [KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
games_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚õè MINERS ‚õè", callback_data="game_miners"),
         InlineKeyboardButton(text="‚öΩ GOAL ‚öΩ", callback_data="game_goal")],
        [InlineKeyboardButton(text="‚úàÔ∏è AVIATRIX ‚úàÔ∏è", callback_data="game_aviatrix"),
         InlineKeyboardButton(text="ü•Ö Penalty Shoot-out ü•Ö", callback_data="game_penalty")],
        [InlineKeyboardButton(text="üé∞ ROULETTE üé∞", callback_data="game_roulette")]
    ]
)

# –ö–æ–º–∞–Ω–¥–∞ /test_reply
@router.message(F.text == "/test_reply")
async def test_reply_keyboard_handler(message: Message):
    await message.answer("–í–æ—Ç –æ–±—ã—á–Ω–∞—è Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ üëá", reply_markup=test_reply_keyboard)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def send_start_text(bot: Bot, target, is_edit: bool = False):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç CasinoHackü§ñ\n"
        "Welcome to the CasinoHack signal botü§ñ\n\n"
        "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –±–∞–∑–µ ChatGPT-4.0üß†\n"
        "This bot is powered by ChatGPT-4.0üß†\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n"
        "By continuing, you agree that all information is for educational purposes only.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language üëá"
    )

    if is_edit:
        await target.edit_text(text=text, reply_markup=lang_inline_keyboard)
    else:
        # –°–∫—Ä—ã–≤–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        await bot.send_message(
            chat_id=target,
            text=text,
            reply_markup=lang_inline_keyboard
        )


# /start
@router.message(CommandStart())
async def start_handler(message: Message, bot: Bot):
    await send_start_text(bot=bot, target=message.chat.id, is_edit=False)

    session = SessionLocal()
    user_exists = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user_exists:
        new_user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            lang=None
        )
        session.add(new_user)
        session.commit()
    session.close()

# –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
@router.callback_query(F.data == "back_to_lang")
async def back_to_language(callback: CallbackQuery, bot: Bot):
    await send_start_text(bot=bot, target=callback.message, is_edit=True)
    await callback.answer()

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞ RU
@router.callback_query(F.data == "lang_ru")
async def lang_ru_selected(callback: CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    if user:
        user.lang = "ru"
        session.commit()
    session.close()

    await callback.message.edit_text(
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).\n\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üëá",
        reply_markup=reg_inline_keyboard_ru
    )
    await callback.answer()

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞ EN
@router.callback_query(F.data == "lang_en")
async def lang_en_selected(callback: CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    if user:
        user.lang = "en"
        session.commit()
    session.close()

    await callback.message.edit_text(
        "This bot works only with newly created accounts registered via the link below.\n\n"
        "Please register a new account and send your ID (numbers only) to the bot.\n\n"
        "Registration link üëá",
        reply_markup=reg_inline_keyboard_en
    )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
@router.callback_query(F.data == "reg_link_ru")
async def send_registration_link(callback: CallbackQuery):
    await callback.message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: https://example.com/your_link")
    await callback.answer()

@router.callback_query(F.data == "reg_link_en")
async def send_registration_link_en(callback: CallbackQuery):
    await callback.message.answer("Here is the registration link: https://example.com/your_link")
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è"
@router.callback_query(F.data == "registered_ru")
async def registered_ru(callback: CallbackQuery):
    awaiting_ids[callback.from_user.id] = True
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
    await callback.answer()

@router.callback_query(F.data == "registered_en")
async def registered_en(callback: CallbackQuery):
    awaiting_ids[callback.from_user.id] = True
    await callback.message.answer("Enter the ID of your new account (numbers only)")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID
@router.message()
async def check_user_id(message: Message):
    if not awaiting_ids.get(message.from_user.id):
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    user_id = message.text.strip()

    try:
        with open("bot/database/valid_ids.txt", "r", encoding="utf-8") as f:
            valid_ids = f.read().splitlines()
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user_id in valid_ids:
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é ID –≤ –±–∞–∑–µ...")
        await message.answer(
            "‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!\n\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –Ω–∏–∂–µ\n2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë –Ω–∞ —Å–∞–π—Ç–µ\n3Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–∏–≥–Ω–∞–ª üéØ",
            reply_markup=games_keyboard
        )
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è ID
        awaiting_ids.pop(message.from_user.id, None)
    else:
        await message.answer("‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
@router.callback_query(F.data.startswith("game_"))
async def game_selected(callback: CallbackQuery):
    game = callback.data.replace("game_", "").upper()
    await callback.message.answer(f"üéÆ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {game}")
    await callback.answer()
